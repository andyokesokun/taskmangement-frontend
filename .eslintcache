[{"C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\MainLayout\\index.jsx":"1","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Sidebar\\index.jsx":"2","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Views\\UserForm.jsx":"3","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\utils\\middleware.js":"4","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Views\\TaskForm.jsx":"5","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\UserList\\index.jsx":"6","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\User\\index.jsx":"7","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Views\\TaskAssign.jsx":"8"},{"size":2915,"mtime":1607376749324,"results":"9","hashOfConfig":"10"},{"size":815,"mtime":1607378398204,"results":"11","hashOfConfig":"10"},{"size":2270,"mtime":1607378989289,"results":"12","hashOfConfig":"10"},{"size":3253,"mtime":1607377327783,"results":"13","hashOfConfig":"10"},{"size":3528,"mtime":1607378879321,"results":"14","hashOfConfig":"10"},{"size":856,"mtime":1607378618173,"results":"15","hashOfConfig":"10"},{"size":323,"mtime":1607378512344,"results":"16","hashOfConfig":"10"},{"size":3044,"mtime":1607379024846,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uuwa2a",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\MainLayout\\index.jsx",[],"C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Sidebar\\index.jsx",[],"C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Views\\UserForm.jsx",["37","38","39","40"],"import  React,{useState} from \"react\";\r\nimport './style.sass'\r\nimport {Card, CardContent,TextField, TextareaAutosize} from \"@material-ui/core\"\r\nimport {useForm} from '../../hooks'\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {addUserRequest} from '../../utils/middleware'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\n\r\n\r\nfunction UserForm({formTitle, btnTitle}) {    \r\n    const {formValues,handleChange, resetForm} = useForm({username:\"\"} ) \r\n    const dispatch = useDispatch();\r\n    const defaultPassword =\"password@123\" \r\n    console.log(formValues)\r\n    const handle = async () => {\r\n        dispatch(addUserRequest(formValues))\r\n        window.location.href=\"/users/manage\"\r\n      \r\n\r\n   } \r\n\r\n\r\n    return (          \r\n                (<div className=\"form-holder\">\r\n                 <h3 className=\"form-label\">  {formTitle} </h3>\r\n                <div className=\"fancy-form\" >            \r\n                <Card>\r\n                             \r\n                    <CardContent>\r\n                    \r\n                        <div className=\"form-field\">\r\n                        <div className=\"form-field\">\r\n                            <TextField fullWidth   \r\n                                    id=\"username\" \r\n                                    name =\"username\"\r\n                                    label=\"Username\" \r\n                                    variant=\"outlined\"   \r\n                                    onChange={handleChange } />\r\n                        </div>\r\n                                    \r\n                        </div>\r\n                           <p className=\"gray\">Default Password: {defaultPassword}</p>\r\n                         \r\n                            <button className=\"btn\" onClick={handle} > {btnTitle}           \r\n                           </button>\r\n                        \r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n               \r\n            </div>) \r\n        )\r\n    \r\n\r\n}\r\n\r\n// const mapStateToProps = (state) =>({\r\n//     isLogined: state ? state.isLogined : \"\"\r\n// });\r\n\r\n// const mapActionToProps ={\r\n//     setAuth  \r\n// }\r\n\r\n// export default  connect(mapStateToProps, mapActionToProps) (withRouter(Login))\r\nexport default withRouter(UserForm)\r\n\r\n\r\n","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\utils\\middleware.js",["41"],"import  client  from './makeRequest'\r\nimport {LOADING,FETCHTASK} from  '../constants/actionTypes'\r\nimport {addTask, removeTask, error, updateTask,  addUser} from  '../constants/actions'\r\n\r\n\r\nexport const fetchAllTasks =  () => {\r\n    return async (dispatch,getState) =>{\r\n        const currentState = getState();\r\n        if(!currentState.task.hasData){\r\n            dispatch({type:LOADING});\r\n            try{\r\n                \r\n                const result=await client({path:\"tasks\"})\r\n                dispatch({type:FETCHTASK, payload: result });\r\n            }catch(err){\r\n                dispatch(error(err));\r\n                console.log(err)\r\n            }\r\n\r\n        }\r\n    }\r\n    \r\n} \r\n\r\n\r\nexport const fetchTaskById = (id) => {\r\n    return async (dispatch) =>{\r\n        dispatch({type:LOADING});\r\n        try{\r\n            const result=await client({path:`tasks/${id}`})\r\n             dispatch({type:FETCHTASK, payload: result });\r\n         }catch(err){\r\n            // dispatch(error(err));\r\n         }\r\n    }\r\n    \r\n}\r\n\r\nexport const  addTaskRequest = (data) => {\r\n    return  async (dispatch) =>{    \r\n        try{\r\n             const result=await client({path:\"tasks\",method:\"POST\", data:data })\r\n             dispatch(addTask(result));\r\n         }catch(err){\r\n             dispatch(error(err));\r\n         }\r\n    }  \r\n} \r\n\r\nexport const  deleteTaskRequest = (id) => {\r\n    return  async (dispatch) =>{    \r\n        try{\r\n             const result=await client({path:`tasks/${id}`,method:\"DELETE\", data:{id} })\r\n             dispatch(removeTask(id));\r\n         }catch(err){\r\n            dispatch(error(err));\r\n           \r\n         }\r\n    }  \r\n} \r\n\r\nexport const  updateTaskRequest = ({index, task} ) => {\r\n    return  async (dispatch) =>{    \r\n        try{\r\n             const result=await client({path:`tasks/${task.id}`,method:\"PUT\", data:task })\r\n             dispatch(updateTask(index, result));\r\n         }catch(err){\r\n            dispatch(error(err));\r\n           \r\n         }\r\n    }  \r\n} \r\n\r\nexport const  assignTaskRequest = ({index, taskId, userName}) => {\r\n    return  async (dispatch) =>{    \r\n        try{\r\n             const data ={taskId, userName }\r\n             console.log(data);\r\n             const result=await client({path:`tasks/assign`,method:\"POST\", data:data})\r\n             dispatch(updateTask(index, result));\r\n         }catch(err){\r\n            dispatch(error(err));\r\n           \r\n         }\r\n    }  \r\n} \r\n\r\nexport const  fetchUsers = () => {\r\n    return  async (dispatch,getState) =>{    \r\n        const currentState = getState();\r\n        if(sessionStorage.getItem(\"token\") &&  !currentState.user.users.hasData){\r\n            try{\r\n              \r\n                const result=await client({path:\"users\"})\r\n                dispatch(addUser(result) );\r\n                \r\n            }catch(err){\r\n                console.log(err)\r\n            \r\n            }\r\n        }\r\n    }  \r\n}\r\n\r\nexport const  addUserRequest = ({username}) => {\r\n    return  async (dispatch) =>{    \r\n        try{\r\n             const result=await client({path:\"users\",method:\"POST\", data:{username} })\r\n             dispatch(addUser(result) );\r\n         }catch(err){\r\n            dispatch(error(err));\r\n           \r\n         }\r\n    }  \r\n}","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Views\\TaskForm.jsx",["42","43","44"],"import  React from \"react\";\r\nimport './style.sass'\r\nimport {Card, CardContent,TextField, TextareaAutosize} from \"@material-ui/core\"\r\nimport {Redirect, withRouter, useParams} from 'react-router-dom'\r\nimport {useForm} from '../../hooks'\r\nimport {connect, useDispatch,useSelector} from \"react-redux\";\r\nimport {addTaskRequest, updateTaskRequest} from '../../utils/middleware'\r\nimport {getTaskById} from '../../utils/selectors'\r\n\r\n\r\n\r\nfunction TaskForm({formTitle, btnTitle,location}) { \r\n    \r\n    let {taskId} = useParams();\r\n    let {index} = useParams();\r\n    let task = useSelector((state) => getTaskById(state.task.tasks, taskId) ) \r\n    const {formValues,handleChange} = useForm( task ? task : {name:\"\", description:\"\", duedate: \"\" }   )   \r\n    const dispatch = useDispatch();\r\n\r\n    const handle = async (e) => {\r\n         e.target.disabled=true;\r\n        //update task since id was provided in the url\r\n        if(taskId){\r\n            dispatch(updateTaskRequest(index, task) )\r\n        }else{\r\n            dispatch(addTaskRequest(formValues) )\r\n           \r\n        }\r\n      \r\n        window.location.href=\"/\"\r\n   } \r\n\r\n    return (          \r\n                (<div className=\"form-holder\">\r\n                 <h3 className=\"form-label\">  {formTitle} </h3>\r\n                <div className=\"fancy-form\" >            \r\n                <Card>\r\n                             \r\n                    <CardContent>\r\n                    \r\n                        <div className=\"form-field\">\r\n                            <TextField fullWidth   \r\n                                    id=\"name\" \r\n                                    name=\"name\"\r\n                                    label=\"name\"\r\n                                    value ={formValues.name}\r\n                                    variant=\"outlined\"  \r\n                                    required \r\n                                    onChange={handleChange} />\r\n                        </div>\r\n                        <div className=\"form-field\">\r\n                            <TextField fullWidth   \r\n                                    id=\"description\"\r\n                                    name=\"description\" \r\n                                    label=\"Description\" \r\n                                    variant=\"outlined\" \r\n                                    multiline \r\n                                    value ={formValues.description}\r\n                                    required \r\n                                    onChange={handleChange} />\r\n                        </div>\r\n                        <div className=\"form-field\">\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            label=\"DueDate\"\r\n                            type=\"date\"\r\n                            name=\"duedate\"\r\n                            required\r\n                            value={formValues.duedate}\r\n                            onChange ={handleChange}\r\n                            InputLabelProps={{\r\n                            shrink: true,\r\n                            }}\r\n                        />\r\n                        </div>\r\n        \r\n                            <button className=\"btn\"  onClick={handle} > {btnTitle}           \r\n                           </button>\r\n                        \r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n               \r\n            </div>) \r\n        )\r\n    \r\n\r\n}\r\n\r\nexport default  withRouter(TaskForm)\r\n\r\n\r\n","C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\UserList\\index.jsx",[],"C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\User\\index.jsx",[],"C:\\Users\\okesokunan\\source\\repos\\Frontend\\taskmanagement-client\\src\\Components\\Views\\TaskAssign.jsx",["45","46","47","48","49","50"],{"ruleId":"51","severity":1,"message":"52","line":1,"column":16,"nodeType":"53","messageId":"54","endLine":1,"endColumn":24},{"ruleId":"51","severity":1,"message":"55","line":3,"column":38,"nodeType":"53","messageId":"54","endLine":3,"endColumn":54},{"ruleId":"51","severity":1,"message":"56","line":5,"column":9,"nodeType":"53","messageId":"54","endLine":5,"endColumn":16},{"ruleId":"51","severity":1,"message":"57","line":12,"column":37,"nodeType":"53","messageId":"54","endLine":12,"endColumn":46},{"ruleId":"51","severity":1,"message":"58","line":53,"column":20,"nodeType":"53","messageId":"54","endLine":53,"endColumn":26},{"ruleId":"51","severity":1,"message":"55","line":3,"column":38,"nodeType":"53","messageId":"54","endLine":3,"endColumn":54},{"ruleId":"51","severity":1,"message":"59","line":4,"column":9,"nodeType":"53","messageId":"54","endLine":4,"endColumn":17},{"ruleId":"51","severity":1,"message":"56","line":6,"column":9,"nodeType":"53","messageId":"54","endLine":6,"endColumn":16},{"ruleId":"51","severity":1,"message":"60","line":3,"column":9,"nodeType":"53","messageId":"54","endLine":3,"endColumn":18},{"ruleId":"51","severity":1,"message":"61","line":4,"column":10,"nodeType":"53","messageId":"54","endLine":4,"endColumn":14},{"ruleId":"51","severity":1,"message":"56","line":6,"column":9,"nodeType":"53","messageId":"54","endLine":6,"endColumn":16},{"ruleId":"51","severity":1,"message":"62","line":8,"column":17,"nodeType":"53","messageId":"54","endLine":8,"endColumn":28},{"ruleId":"51","severity":1,"message":"63","line":11,"column":8,"nodeType":"53","messageId":"54","endLine":11,"endColumn":12},{"ruleId":"51","severity":1,"message":"64","line":21,"column":10,"nodeType":"53","messageId":"54","endLine":21,"endColumn":13},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'TextareaAutosize' is defined but never used.","'connect' is defined but never used.","'resetForm' is assigned a value but never used.","'result' is assigned a value but never used.","'Redirect' is defined but never used.","'ArrowBack' is defined but never used.","'Link' is defined but never used.","'useRedirect' is defined but never used.","'User' is defined but never used.","'url' is assigned a value but never used."]